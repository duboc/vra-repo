formatVersion: 1
inputs:
  wfinstance:
    type: string
    default: 'https://surf.wavefront.com'
  wftoken:
    type: string
    default: cb9a7b18-755b-408c-a3d0-633870a55a84
    encrypted: true
  wfsource:
    type: string
    default: cd-nats-duboc
  ambiente:
    type: string
    enum:
      - 'platform:vmw'
      - 'platform:aws'
      - 'platform:azure'
    default: 'platform:vmw'
  publicKey:
    type: string
    encrypted: true
    default: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1UDCZciJBxVbSo2tpDsPWtyQ34JcY/tbPAlRsx2QUQaxttwCfrIEZURnn7OHiiwFvtiZy8nl1TCKa4s2SXLN/rEJvdDvlD9kWOSxJ1eBK3aPVVrT0TA3+rKFMhL5uz5Ku90iR0ZSALGz6uoGgLxizhbIrCWbnyCE5ThOPjCM6FvuefRUwSLuxJ6ZpenVfO2+TzTzp0a2qq5Wrt2sMsevpQGoveykB8Dliliwsx+hlC1LZ6V2Q59MOYY5SQ9PSXiUNjK5LbV32YjcQ2e2tU0qUpIytj/qFFrlZ9DRBN37GdbWH56LtHwgvXCLhSMuhYwXBJ5o/zsjnUwwW+Symsiql aduboc@administrators-MacBook-Pro-3.local
resources:
  frontend_sg:
    type: Cloud.SecurityGroup
    properties:
      securityGroupType: new
      name: frontend
      rules:
        - source: any
          direction: inbound
          name: frontend
          ports: 80
          protocol: TCP
  Cloud_SecurityGroup_2:
    type: Cloud.SecurityGroup
    properties:
      securityGroupType: new
      rules:
        - source: '${resource.frontend_sg.id}'
          direction: inbound
          service: TCP
          ports: 80
          name: api-server
  frontend_1:
    type: Cloud.Machine
    dependsOn:
      - api_server_1
    properties:
      image: Ubuntu
      flavor: Small
      tags:
        - key: tier
          value: frontend
      constraints:
        - tag: '${input.ambiente}'
      remoteAccess:
        authentication: publicPrivateKey
        sshKey: '${input.publicKey}'
      cloudConfig: |
        #cloud-config
        repo_update: true
        repo_upgrade: all

        packages:
          - nginx
        write_files:
          - path: /etc/nginx/conf.d/nginx.conf
            permissions: '0644'
            content: |
             server {
               listen 81;
               location /basic_status {
                 stub_status;
               }
             }

        runcmd: 
          - git clone https://github.com/duboc/cats-and-dogs.git
          - cp -r cats-and-dogs/site/* /var/www/html/
          - cd /var/www/html/js
          - sed -i 's/changecat/${resource.api_server_1.address}/' boot.js
          - sed -i 's/changedog/${resource.api_server_1.address}/' boot.js
        #cloud-config
      networks:
        - network: '${resource.Cloud_NSX_Network_1.id}'
          securityGroups:
            - '${resource.frontend_sg.id}'
  api_server_1:
    type: Cloud.Machine
    dependsOn:
      - nats_server_1
    properties:
      image: Ubuntu
      flavor: Small
      tags:
        - key: tier
          value: apiservice
      constraints:
        - tag: '${input.ambiente}'
      remoteAccess:
        authentication: publicPrivateKey
        sshKey: '${input.publicKey}'
      cloudConfig: |
        #cloud-config
        repo_update: true
        repo_upgrade: true
             
        runcmd:
          - hostname api-server
          - apt-get update 
          - apt-get upgrade
          - apt-get install docker.io -y
          - systemctl enable docker
          - systemctl restart docker
          - echo "export WAVEFRONT_INSTANCE=${input.wfinstance}" >> /root/.profile
          - echo "export WAVEFRONT_TOKEN=${input.wftoken}" >> /root/.profile
          - echo "export WAVEFRONT_SOURCE=${input.wfsource}" >> /root/.profile
          - echo "export NATS_ENDPOINT=nats://${resource.nats_server_1.address}:4222" >> /root/.profile
          - source /root/.profile
          - git clone https://github.com/duboc/cats-and-dogs
          - docker run --restart=always -d -p 80:80 -e WAVEFRONT_INSTANCE=${input.wfinstance} -e WAVEFRONT_TOKEN=${input.wftoken} -e NATS_ENDPOINT=nats://${resource.nats_server_1.address}:4222 duboc/cdbackend-nats:1.0
      networks:
        - network: '${resource.Cloud_NSX_Network_1.id}'
          securityGroups:
            - '${resource.Cloud_SecurityGroup_2.id}'
  nats_sg:
    type: Cloud.SecurityGroup
    properties:
      securityGroupType: new
      rules:
        - source: '${resource.Cloud_SecurityGroup_2.id}'
          protocol: TCP
          ports: 4222
          direction: inbound
          name: queue-entry
        - source: '${resource.fila_sg.id}'
          protocol: TCP
          ports: 4222
          direction: inbound
          name: queue-subscription
  mongo_sg:
    type: Cloud.SecurityGroup
    properties:
      securityGroupType: new
      rules:
        - source: '${resource.fila_sg.id}'
          ports: 27017
          protocol: TCP
          name: mongo-acesso
          direction: inbound
  mongo_server_1:
    type: Cloud.Machine
    properties:
      image: Ubuntu
      flavor: Small
      tags:
        - key: tier
          value: database
      remoteAccess:
        authentication: publicPrivateKey
        sshKey: '${input.publicKey}'
      constraints:
        - tag: '${input.ambiente}'
      cloudConfig: |
        #cloud-config
        repo_update: true
        repo_upgrade: all

        write_files:
          - path: /etc/mongod2.conf
            permissions: '0644'
            content: |
             # mongod.conf
             
             # for documentation of all options, see:
             #   http://docs.mongodb.org/manual/reference/configuration-options/
             
             # Where and how to store data.
             storage:
               dbPath: /var/lib/mongodb
               journal:
                 enabled: true
             #  engine:
             #  mmapv1:
             #  wiredTiger:
             
             # where to write logging data.
             systemLog:
               destination: file
               logAppend: true
               path: /var/log/mongodb/mongod.log
             
             # network interfaces
             net:
               port: 27017
               bindIpAll: true
             
             
             # how the process runs
             processManagement:
               timeZoneInfo: /usr/share/zoneinfo
             
             #security:
             #   authorization: enabled
             #operationProfiling:
             
             #replication:
             
             #shard             
             ## Enterprise-Only Options:
             
             #auditLog:
             
             #snmp:
             

        runcmd:
          - hostname mongo-server
          - wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -
          - echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list
          - apt-get update -y
          - apt-get install -y mongodb-org
          - cp /etc/mongod.conf /etc/mongod.old
          - mv /etc/mongod2.conf /etc/mongod.conf
          - chmod 644 /etc/mongod.conf
          - service mongod start
      networks:
        - network: '${resource.Cloud_NSX_Network_1.id}'
          securityGroups:
            - '${resource.mongo_sg.id}'
  nats_server_1:
    type: Cloud.Machine
    dependsOn:
      - mongo_server_1
    properties:
      image: Ubuntu
      flavor: Small
      tags:
        - key: tier
          value: nats
      constraints:
        - tag: '${input.ambiente}'
      remoteAccess:
        authentication: publicPrivateKey
        sshKey: '${input.publicKey}'
      cloudConfig: |
        #cloud-config
        repo_update: true
        repo_upgrade: all
             
        runcmd:
          - hostname nats-server
          - apt-get update 
          - apt-get upgrade
          - apt-get install docker.io -y
          - systemctl enable docker
          - systemctl restart docker
          - docker run --restart=always -d -p 4222:4222 -p 8222:8222 nats:2.1.2
      networks:
        - network: '${resource.Cloud_NSX_Network_1.id}'
          securityGroups:
            - '${resource.nats_sg.id}'
  queue_service_1:
    type: Cloud.Machine
    dependsOn:
      - nats_server_1
    properties:
      image: Ubuntu
      flavor: Small
      tags:
        - key: tier
          value: queue_service
      constraints:
        - tag: '${input.ambiente}'
      remoteAccess:
        authentication: publicPrivateKey
        sshKey: '${input.publicKey}'
      cloudConfig: |
        #cloud-config
        repo_update: true
        repo_upgrade: true
             
        runcmd:
          - hostname queue-service
          - apt-get update 
          - apt-get upgrade
          - apt-get install docker.io -y
          - systemctl enable docker
          - systemctl restart docker
          - echo "export NATS_ENDPOINT=nats://${resource.nats_server_1.address}:4222" >> /root/.profile
          - echo "export MONGODB_ENDPOINT=mongodb://${resource.mongo_server_1.address}" >> /root/.profile
          - source /root/.profile
          - git clone https://github.com/duboc/cats-and-dogs
          - docker run --restart=always -d -e NATS_ENDPOINT=nats://${resource.nats_server_1.address}:4222 -e MONGODB_ENDPOINT=mongodb://${resource.mongo_server_1.address} duboc/cdbackend-mongo:1.0
      networks:
        - network: '${resource.Cloud_NSX_Network_1.id}'
          securityGroups:
            - '${resource.fila_sg.id}'
  fila_sg:
    type: Cloud.SecurityGroup
    properties:
      securityGroupType: new
      rules:
        - source: any
          direction: inbound
          ports: 22
          protocol: TCP
          name: ssh
  Cloud_NSX_Network_1:
    type: Cloud.NSX.Network
    properties:
      networkType: routed
      constraints:
        - tag: 'net:routed'

